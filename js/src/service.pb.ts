// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: service.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface AddRequest {
  a: number;
  b: number;
}

export interface AddResponse {
  value: number;
}

//========================================//
//      TestService Protobuf Client       //
//========================================//

export async function Add(
  addRequest: AddRequest,
  config?: ClientConfiguration,
): Promise<AddResponse> {
  const response = await PBrequest(
    "/TestService/Add",
    AddRequest.encode(addRequest),
    config,
  );
  return AddResponse.decode(response);
}

//========================================//
//        TestService JSON Client         //
//========================================//

export async function AddJSON(
  addRequest: AddRequest,
  config?: ClientConfiguration,
): Promise<AddResponse> {
  const response = await JSONrequest(
    "/TestService/Add",
    AddRequestJSON.encode(addRequest),
    config,
  );
  return AddResponseJSON.decode(response);
}

//========================================//
//              TestService               //
//========================================//

export interface TestService<Context = unknown> {
  Add: (
    addRequest: AddRequest,
    context: Context,
  ) => Promise<AddResponse> | AddResponse;
}

export function createTestService<Context>(service: TestService<Context>) {
  return {
    name: "TestService",
    methods: {
      Add: {
        name: "Add",
        handler: service.Add,
        input: { protobuf: AddRequest, json: AddRequestJSON },
        output: { protobuf: AddResponse, json: AddResponseJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const AddRequest = {
  /**
   * Serializes AddRequest to protobuf.
   */
  encode: function (msg: PartialDeep<AddRequest>): Uint8Array {
    return AddRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AddRequest from protobuf.
   */
  decode: function (bytes: ByteSource): AddRequest {
    return AddRequest._readMessage(
      AddRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes AddRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<AddRequest>): AddRequest {
    return {
      a: 0,
      b: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AddRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.a) {
      writer.writeFloat(1, msg.a);
    }
    if (msg.b) {
      writer.writeFloat(2, msg.b);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AddRequest,
    reader: protoscript.BinaryReader,
  ): AddRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.a = reader.readFloat();
          break;
        }
        case 2: {
          msg.b = reader.readFloat();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AddResponse = {
  /**
   * Serializes AddResponse to protobuf.
   */
  encode: function (msg: PartialDeep<AddResponse>): Uint8Array {
    return AddResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AddResponse from protobuf.
   */
  decode: function (bytes: ByteSource): AddResponse {
    return AddResponse._readMessage(
      AddResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes AddResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<AddResponse>): AddResponse {
    return {
      value: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AddResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.value) {
      writer.writeFloat(1, msg.value);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AddResponse,
    reader: protoscript.BinaryReader,
  ): AddResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.value = reader.readFloat();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const AddRequestJSON = {
  /**
   * Serializes AddRequest to JSON.
   */
  encode: function (msg: PartialDeep<AddRequest>): string {
    return JSON.stringify(AddRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes AddRequest from JSON.
   */
  decode: function (json: string): AddRequest {
    return AddRequestJSON._readMessage(
      AddRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AddRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<AddRequest>): AddRequest {
    return {
      a: 0,
      b: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AddRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.a) {
      json["a"] = msg.a;
    }
    if (msg.b) {
      json["b"] = msg.b;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: AddRequest, json: any): AddRequest {
    const _a_ = json["a"];
    if (_a_) {
      msg.a = protoscript.parseDouble(_a_);
    }
    const _b_ = json["b"];
    if (_b_) {
      msg.b = protoscript.parseDouble(_b_);
    }
    return msg;
  },
};

export const AddResponseJSON = {
  /**
   * Serializes AddResponse to JSON.
   */
  encode: function (msg: PartialDeep<AddResponse>): string {
    return JSON.stringify(AddResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes AddResponse from JSON.
   */
  decode: function (json: string): AddResponse {
    return AddResponseJSON._readMessage(
      AddResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AddResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<AddResponse>): AddResponse {
    return {
      value: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AddResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.value) {
      json["value"] = msg.value;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: AddResponse, json: any): AddResponse {
    const _value_ = json["value"];
    if (_value_) {
      msg.value = protoscript.parseDouble(_value_);
    }
    return msg;
  },
};
